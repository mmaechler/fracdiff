
R version 3.6.2 Patched (2019-12-14 r77587) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(fracdiff)
> 
> .proctime00 <- proc.time()
> 
> set.seed(107)
> options(digits = 5)
> 
> ## 1)
> 
> x1 <- fracdiff.sim(5000, ar = .2, ma = -.4, d = .3, n.start=0, allow.0 = TRUE)
> (fd1 <- fracdiff(x1$series, nar = 1, nma = 1, dtol = 1e-10))

Call:
  fracdiff(x = x1$series, nar = 1, nma = 1, dtol = 1e-10) 

Coefficients:
       d       ar       ma 
 0.26721  0.27824 -0.36951 
sigma[eps] = 0.99138 
a list with components:
 [1] "log.likelihood"  "n"               "msg"             "d"              
 [5] "ar"              "ma"              "covariance.dpq"  "fnormMin"       
 [9] "sigma"           "stderror.dpq"    "correlation.dpq" "h"              
[13] "d.tol"           "M"               "hessian.dpq"     "length.w"       
[17] "residuals"       "fitted"          "call"           
> vcov(fd1)
              d         ar1         ma1
d    0.00059661 -0.00080522 -0.00018971
ar1 -0.00080522  0.00161219  0.00066399
ma1 -0.00018971  0.00066399  0.00054849
> logLik(fd1)
'log Lik.' -7051.5 (df=4)
> 
> fdCOVcomp <-
+     c("h", "covariance.dpq", "stderror.dpq", "correlation.dpq", "hessian.dpq")
> fd1. <- fracdiff.var(x1$series, fd1, h = fd1$h / 2)
> dns <- dimnames(fd1.$covariance.dpq)
> 
> ## dput(sapply(fd1.[fdCOVcomp], signif, digits = 4)) # edited:
> fd1.L <- list(
+     h = 3.7155e-05,
+     covariance.dpq = matrix(c(0.0005966, -0.0008052, -0.0001897,
+                               -0.0008052, 0.001612, 0.000664,
+                               -0.0001897, 0.000664, 0.0005485),
+                             3L, 3L, dimnames = dns),
+     stderror.dpq = c(0.02443, 0.04015, 0.02342),
+     correlation.dpq = matrix(c(1, -0.821, -0.3316,
+                                -0.821, 1,  0.7061,
+                                -0.3316, 0.7061, 1), 3),
+     hessian.dpq = matrix(c(-8252, -5875, 4258,
+                            -5875, -5420, 4529,
+                            4258, 4529, -5834),
+                          3L, 3L, dimnames = dns))
> stopifnot(all.equal(fd1.[fdCOVcomp], fd1.L, tolerance = 2e-4))
> 
> fd1u <- fracdiff.var(x1$series, fd1, h = fd1$h * 8)
> ## dput(sapply(fd1u[fdCOVcomp], signif, digits = 4)) :
> fd1uL <- list(
+     h = 0.0005945,
+     covariance.dpq = matrix(c(0.0005966, -0.0008052, -0.0001897,
+                               -0.0008052, 0.001612, 0.000664,
+                               -0.0001897, 0.000664, 0.0005485),
+                             3L, 3L, dimnames = dns),
+     stderror.dpq = c(0.02443, 0.04015, 0.02342),
+     correlation.dpq = matrix(c(1, -0.821, -0.3316,
+                                -0.821, 1, 0.7061,
+                                -0.3316, 0.7061, 1), 3),
+     hessian.dpq = matrix(c(-8252, -5875, 4258,
+                            -5875, -5420, 4529,
+                             4258,  4529, -5834),
+                             3L, 3L, dimnames = dns))
> stopifnot( all.equal(fd1u[fdCOVcomp], fd1uL, tolerance = 2e-4) )
> 
> ## 2)
> 
> x2 <-  fracdiff.sim( 2048, ar = .8, ma = -.4, d = .3, n.start=0, allow.0 = TRUE)
> ## -> NA's and problems
> fd2 <- fracdiff(x2$series, nar = length(x2$ar), nma = length(x2$ma))
> summary(fd2)

Call:
  fracdiff(x = x2$series, nar = length(x2$ar), nma = length(x2$ma)) 

Coefficients:
   Estimate Std. Error z value Pr(>|z|)    
d    0.3374     0.0205    16.5   <2e-16 ***
ar   0.7710     0.0414    18.6   <2e-16 ***
ma  -0.3810     0.0160   -23.8   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
sigma[eps] = 1.0088 
[d.tol = 0.0001221, M = 100, h = 3.082e-05]
Log likelihood: -2.92e+03 ==> AIC = 5856.5 [4 deg.freedom]
> 
> fd2. <- fracdiff.var(x2$series, fd2, h = fd2$h / 2)
> sapply(fd2.[fdCOVcomp], signif, digits = 4)
$h
[1] 1.541e-05

$covariance.dpq
             d        ar1        ma1
d    5.473e-05 -9.261e-05 -8.835e-06
ar1 -9.261e-05  6.717e-04  1.700e-04
ma1 -8.835e-06  1.700e-04  2.478e-04

$stderror.dpq
[1] 0.007398 0.025920 0.015740

$correlation.dpq
         [,1]    [,2]     [,3]
[1,]  1.00000 -0.4830 -0.07587
[2,] -0.48300  1.0000  0.41660
[3,] -0.07587  0.4166  1.00000

$hessian.dpq
         d   ar1   ma1
d   -24440 -3811  1742
ar1  -3811 -2396  1507
ma1   1742  1507 -5007

> fd2u <- fracdiff.var(x2$series, fd2, h = fd2$h * 8)#-> warning, unable .. corr...
Warning message:
In fracdiff.var(x2$series, fd2, h = fd2$h * 8) :
  unable to compute correlation matrix
> sapply(fd2u[fdCOVcomp], signif, digits = 4)
$h
[1] 0.0002466

$covariance.dpq
             d        ar1       ma1
d   -3.545e-04  6.000e-04 5.724e-05
ar1  6.000e-04 -5.003e-04 5.816e-05
ma1  5.724e-05  5.816e-05 2.371e-04

$stderror.dpq
[1] 0.0000 0.0000 0.0154

$correlation.dpq
     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

$hessian.dpq
        d   ar1   ma1
d   -3347 -3811  1742
ar1 -3811 -2396  1507
ma1  1742  1507 -5007

> 
> ## Last Line:
> cat('Time elapsed: ', proc.time() - .proctime00,'\n')
Time elapsed:  0.065 0.002 0.067 0 0 
> 
> proc.time()
   user  system elapsed 
  0.164   0.021   0.225 
